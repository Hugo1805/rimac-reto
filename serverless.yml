service: rimac-reto-api

frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-dotenv-plugin
  - serverless-openapi-documenter

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  timeout: 10
  memorySize: 256
  apiGateway:
    usagePlan:
      throttle:
        burstLimit: 10
        rateLimit: 5
  environment:
    IS_OFFLINE: ${env:IS_OFFLINE, 'false'}
    STAGE: ${self:provider.stage}
    DYNAMODB_TABLE_FUSION: ${self:service}-fusion-${self:provider.stage}
    DYNAMODB_TABLE_CUSTOM: ${self:service}-custom-${self:provider.stage}
    DYNAMODB_TABLE_CACHE: ${self:service}-cache-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'your-secret-key-here'}
    SWAPI_BASE_URL: https://swapi.dev/api
    WEATHER_API_KEY: ${env:WEATHER_API_KEY, ''}
    WEATHER_BASE_URL: https://api.openweathermap.org/data/2.5
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - 'Fn::GetAtt': [FusionTable, Arn]
            - 'Fn::GetAtt': [CustomTable, Arn]
            - 'Fn::GetAtt': [CacheTable, Arn]

functions:
  # Función para obtener token - SIN AUTENTICACIÓN
  getToken:
    handler: src/handlers/auth.getToken
    events:
      - http:
          path: auth/token
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  # Authorizer function
  authorizerFunc:
    handler: src/handlers/auth.authorize

  # Obtener datos fusionados - SIN AUTENTICACIÓN
  getDatosFusionados:
    handler: src/handlers/fusion.getDatosFusionados
    events:
      - http:
          path: fusionados
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  # Obtener datos fusionados por personaje - SIN AUTENTICACIÓN
  getFusionDataByCharacter:
    handler: src/handlers/fusion.createFusionDataByCharacter
    events:
      - http:
          path: fusion/{characterName}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  # Almacenar datos personalizados - CON AUTENTICACIÓN
  almacenarDatos:
    handler: src/handlers/custom.almacenarDatos
    events:
      - http:
          path: almacenar
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            name: authorizerFunc
            type: request

  # Obtener historial - CON AUTENTICACIÓN
  getHistorial:
    handler: src/handlers/history.getHistorial
    events:
      - http:
          path: historial
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            name: authorizerFunc
            type: request

  # Servir especificación OpenAPI - SIN AUTENTICACIÓN
  serveOpenAPI:
    handler: src/handlers/docs.serveOpenAPI
    events:
      - http:
          path: openapi.json
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

resources:
  Resources:
    FusionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_FUSION}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TimestampIndex
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    CustomTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CUSTOM}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TimestampIndex
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CACHE}
        AttributeDefinitions:
          - AttributeName: cacheKey
            AttributeType: S
        KeySchema:
          - AttributeName: cacheKey
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        BillingMode: PAY_PER_REQUEST

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migrate: true
  serverless-offline:
    httpPort: 3000
  documentation:
    version: '1.0.0'
    title: 'Rimac Reto API'
    description: 'API RESTful con datos fusionados de Star Wars y Weather'
    servers:
      - url: 'http://localhost:3000/dev/'
        description: 'Servidor de desarrollo local'
      - url: 'https://api.rimac.com/dev/'
        description: 'Servidor de producción'
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
        description: 'Token JWT obtenido del endpoint /auth/token'
    security:
      - bearerAuth: []
    contact:
      name: 'Hugo Ponce de León'
      email: 'hugoponcedeleon@rimac.com'
    license:
      name: 'MIT'
    tags:
      - name: Authentication
        description: Endpoints de autenticación
      - name: Fusion
        description: Datos fusionados de Star Wars y Weather
      - name: Storage
        description: Almacenamiento de datos personalizados
      - name: History
        description: Consulta de historial
      - name: Documentation
        description: Documentación de la API
    models:
      - name: AuthRequest
        description: 'Credenciales de usuario'
        contentType: "application/json"
        schema:
          type: object
          properties:
            username:
              type: string
              example: "admin"
            password:
              type: string
              example: "rimac2025"
      - name: AuthResponse
        description: 'Respuesta con token JWT'
        schema:
          type: object
          properties:
            token:
              type: string
            message:
              type: string
            expiresIn:
              type: string
      - name: AuthErrorResponse
        description: 'Error de autenticacion'
        schema:
          type: object
          properties:
            error:
              type: string
            message:
              type: string
      - name: FusionResponse
        description: 'Respuesta con datos fusionados'
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: true
              description: "Indica si la operación fue exitosa"
            data:
              type: object
              properties:
                id:
                  type: string
                  example: "c366eccd-5fc5-48db-a600-c9aeecc8c8f0"
                  description: "Identificador único de la fusión"
                timestamp:
                  type: number
                  example: 1755715395659
                  description: "Timestamp de cuando se creó la fusión"
                character:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Yarael Poof"
                      description: "Nombre del personaje"
                    height:
                      type: number
                      example: 264
                      description: "Altura del personaje en centímetros"
                    mass:
                      type: number
                      example: 0
                      description: "Masa del personaje en kilogramos"
                    hairColor:
                      type: string
                      example: "none"
                      description: "Color de cabello"
                    skinColor:
                      type: string
                      example: "white"
                      description: "Color de piel"
                    eyeColor:
                      type: string
                      example: "yellow"
                      description: "Color de ojos"
                    birthYear:
                      type: string
                      example: "unknown"
                      description: "Año de nacimiento"
                    gender:
                      type: string
                      example: "Male"
                      description: "Género del personaje"
                  required:
                    - name
                    - height
                    - mass
                    - hairColor
                    - skinColor
                    - eyeColor
                    - birthYear
                    - gender
                planet:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Quermia"
                      description: "Nombre del planeta"
                    climate:
                      type: string
                      example: "unknown"
                      description: "Clima del planeta"
                    terrain:
                      type: string
                      example: "unknown"
                      description: "Terreno del planeta"
                    population:
                      type: number
                      example: 0
                      description: "Población del planeta"
                    gravity:
                      type: number
                      example: 1
                      description: "Gravedad del planeta"
                    diameter:
                      type: number
                      example: 0
                      description: "Diámetro del planeta en kilómetros"
                  required:
                    - name
                    - climate
                    - terrain
                    - population
                    - gravity
                    - diameter
                weather:
                  type: object
                  properties:
                    temperature:
                      type: number
                      example: 18.5
                      description: "Temperatura actual en grados Celsius"
                    feelsLike:
                      type: number
                      example: 17.8
                      description: "Sensación térmica en grados Celsius"
                    humidity:
                      type: number
                      example: 54
                      description: "Humedad relativa en porcentaje"
                    pressure:
                      type: number
                      example: 1017
                      description: "Presión atmosférica en hPa"
                    windSpeed:
                      type: number
                      example: 4.1
                      description: "Velocidad del viento en m/s"
                    description:
                      type: string
                      example: "few clouds"
                      description: "Descripción del clima"
                    visibility:
                      type: number
                      example: 10000
                      description: "Visibilidad en metros"
                  required:
                    - temperature
                    - feelsLike
                    - humidity
                    - pressure
                    - windSpeed
                    - description
                    - visibility
                fusionScore:
                  type: number
                  example: 70
                  description: "Puntuación de fusión calculada"
                  minimum: 0
                  maximum: 100
              required:
                - id
                - timestamp
                - character
                - planet
                - weather
                - fusionScore
            message:
              type: string
              example: "Datos fusionados obtenidos exitosamente"
              description: "Mensaje descriptivo de la operación"
          required:
            - success
            - data
            - message
      - name: ErrorResponse
        description: 'Respuesta de error'
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: false
              description: "Indica si la operación fue exitosa"
            error:
              type: string
              example: "INTERNAL_ERROR"
              description: "Código de error"
            message:
              type: string
              example: "Error interno del servidor"
              description: "Mensaje descriptivo del error"
      - name: requestStorage
        description: 'Solicitar almacenamiento de datos'
        schema:
          type: object
          properties:
            data:
              type: object
              example: { "key": "value" }
              description: "Datos a almacenar"
          required:
            - data
      - name: SuccessResponse
        description: 'Respuesta exitosa'
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: true
              description: "Indica si la operación fue exitosa"
            data:
              type: object
              description: "Datos almacenados"
            message:
              type: string
              example: "Datos almacenados exitosamente"
              description: "Mensaje descriptivo de la operación"
          required:
            - success
            - data
            - message
      - name: FusionListResponse
        description: 'Respuesta con lista de datos fusionados paginados'
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: true
              description: "Indica si la operación fue exitosa"
            data:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: "e6bd24dc-2fe3-4cf6-be31-15cd75fb93f2"
                    description: "Identificador único de la fusión"
                  timestamp:
                    type: number
                    example: 1755709481209
                    description: "Timestamp de cuando se creó la fusión"
                  character:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Leia Organa"
                        description: "Nombre del personaje"
                      height:
                        type: number
                        example: 150
                        description: "Altura del personaje en centímetros"
                      mass:
                        type: number
                        example: 49
                        description: "Masa del personaje en kilogramos"
                      hairColor:
                        type: string
                        example: "brown"
                        description: "Color de cabello"
                      skinColor:
                        type: string
                        example: "light"
                        description: "Color de piel"
                      eyeColor:
                        type: string
                        example: "brown"
                        description: "Color de ojos"
                      birthYear:
                        type: string
                        example: "19BBY"
                        description: "Año de nacimiento"
                      gender:
                        type: string
                        example: "Female"
                        description: "Género del personaje"
                    required:
                      - name
                      - height
                      - mass
                      - hairColor
                      - skinColor
                      - eyeColor
                      - birthYear
                      - gender
                  planet:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Alderaan"
                        description: "Nombre del planeta"
                      climate:
                        type: string
                        example: "temperate"
                        description: "Clima del planeta"
                      terrain:
                        type: string
                        example: "grasslands, mountains"
                        description: "Terreno del planeta"
                      population:
                        type: number
                        example: 2000000000
                        description: "Población del planeta"
                      gravity:
                        type: number
                        example: 1
                        description: "Gravedad del planeta"
                      diameter:
                        type: number
                        example: 12500
                        description: "Diámetro del planeta en kilómetros"
                    required:
                      - name
                      - climate
                      - terrain
                      - population
                      - gravity
                      - diameter
                  weather:
                    type: object
                    properties:
                      temperature:
                        type: number
                        example: 28.1
                        description: "Temperatura actual en grados Celsius"
                      feelsLike:
                        type: number
                        example: 27.7
                        description: "Sensación térmica en grados Celsius"
                      humidity:
                        type: number
                        example: 39
                        description: "Humedad relativa en porcentaje"
                      pressure:
                        type: number
                        example: 1005
                        description: "Presión atmosférica en hPa"
                      windSpeed:
                        type: number
                        example: 2.1
                        description: "Velocidad del viento en m/s"
                      description:
                        type: string
                        example: "clear sky"
                        description: "Descripción del clima"
                      visibility:
                        type: number
                        example: 10000
                        description: "Visibilidad en metros"
                    required:
                      - temperature
                      - feelsLike
                      - humidity
                      - pressure
                      - windSpeed
                      - description
                      - visibility
                  fusionScore:
                    type: number
                    example: 67.4
                    description: "Puntuación de fusión calculada"
                    minimum: 0
                    maximum: 100
                required:
                  - id
                  - timestamp
                  - character
                  - planet
                  - weather
                  - fusionScore
            message:
              type: string
              example: "Historial obtenido exitosamente"
              description: "Mensaje descriptivo de la operación"
            pagination:
              type: object
              properties:
                page:
                  type: number
                  example: 1
                  description: "Página actual"
                limit:
                  type: number
                  example: 10
                  description: "Número de elementos por página"
                total:
                  type: number
                  example: 4
                  description: "Total de elementos"
                hasNext:
                  type: boolean
                  example: false
                  description: "Indica si hay más páginas"
                hasPrev:
                  type: boolean
                  example: false
                  description: "Indica si hay páginas anteriores"
              required:
                - page
                - limit
                - total
                - hasNext
                - hasPrev
          required:
            - success
            - data
            - message
            - pagination
