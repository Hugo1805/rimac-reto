service: rimac-reto-api

frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  timeout: 30
  memorySize: 256
  environment:
    STAGE: ${self:provider.stage}
    DYNAMODB_TABLE_FUSION: ${self:service}-fusion-${self:provider.stage}
    DYNAMODB_TABLE_CUSTOM: ${self:service}-custom-${self:provider.stage}
    DYNAMODB_TABLE_CACHE: ${self:service}-cache-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'your-secret-key-here'}
    SWAPI_BASE_URL: https://swapi.dev/api
    WEATHER_API_KEY: ${env:WEATHER_API_KEY, ''}
    WEATHER_BASE_URL: https://api.openweathermap.org/data/2.5
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [ FusionTable, Arn ]
            - "Fn::GetAtt": [ CustomTable, Arn ]
            - "Fn::GetAtt": [ CacheTable, Arn ]

functions:
  getDatosFusionados:
    handler: src/handlers/fusion.getDatosFusionados
    events:
      - http:
          path: /fusionados
          method: get
          cors: true

  almacenarDatos:
    handler: src/handlers/custom.almacenarDatos
    events:
      - http:
          path: /almacenar
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
            type: request

  getHistorial:
    handler: src/handlers/history.getHistorial
    events:
      - http:
          path: /historial
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            type: request

  authorizerFunc:
    handler: src/handlers/auth.authorize

resources:
  Resources:
    FusionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_FUSION}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TimestampIndex
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    CustomTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CUSTOM}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TimestampIndex
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CACHE}
        AttributeDefinitions:
          - AttributeName: cacheKey
            AttributeType: S
        KeySchema:
          - AttributeName: cacheKey
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        BillingMode: PAY_PER_REQUEST

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  serverless-offline:
    httpPort: 3000
